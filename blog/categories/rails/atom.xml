<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: rails | rudiCode]]></title>
  <link href="http://rudicode.github.io/blog/categories/rails/atom.xml" rel="self"/>
  <link href="http://rudicode.github.io/"/>
  <updated>2015-01-25T12:40:37-05:00</updated>
  <id>http://rudicode.github.io/</id>
  <author>
    <name><![CDATA[Rudi Luzar]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Set up your Gemfile dependencies using groups]]></title>
    <link href="http://rudicode.github.io/blog/2014/12/04/set-up-gemfile-with-groups-for-development-and-testing/"/>
    <updated>2014-12-04T20:52:33-05:00</updated>
    <id>http://rudicode.github.io/blog/2014/12/04/set-up-gemfile-with-groups-for-development-and-testing</id>
    <content type="html"><![CDATA[<h3>Grouping your dependencies in your Gemfile</h3>

<p>  A typical rails app makes use of many gems. But is it necessary to install or add all of them to the load path?
  In most cases the answer is no.</p>

<p>  Here is a typical example:
  <!--more--></p>

<pre><code class="ruby">source 'https://rubygems.org'

gem 'rails', '4.1.7'
gem 'sass-rails', '~&gt; 4.0.3'
gem 'uglifier', '&gt;= 1.3.0'
gem 'coffee-rails', '~&gt; 4.0.0'
gem 'jquery-rails'

group :development do
  gem 'sqlite3'
  gem 'pry-rails'
  gem 'factory_girl_rails', "~&gt; 4.0"
end

group :test do
  gem 'sqlite3'
  gem 'factory_girl_rails', "~&gt; 4.0"
  gem 'faker'
  gem 'rspec'
  gem 'rspec-rails'
  gem 'capybara'
end

group :production do
  gem 'pg'
end
</code></pre>

<p>The gems that are not listed in a group, are automatically part of the <strong>:default</strong> group.
Organizing the gems in groups gives you different ways to run bundler.</p>

<pre><code class="bash">$ bundle install --without production
</code></pre>

<p>The above will install gems for all the groups except the ones in :production. Also when running your rails app it will not load the gems in the <strong>:production</strong> group. Bundler will also remember this setting and next time you invoke <strong>bundle install</strong> will use the same setting.</p>

<p>You can find out more on the <a href="http://bundler.io/groups.html">Bundler&ndash;Using Groups</a> page.</p>

<p>Notice that the the <strong>sqlite3</strong> and <strong>factory_girl_rails</strong> gems is in both :development and :test, you can dry that up as well, by removing them from those groups and adding them like this:</p>

<pre><code class="ruby">group :development, :test do
  gem 'sqlite3'
  gem 'factory_girl_rails', "~&gt; 4.0"
end
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Rails Migrations: List of table column types]]></title>
    <link href="http://rudicode.github.io/blog/2014/10/20/rails-migrations-list-of-table-column-types/"/>
    <updated>2014-10-20T13:59:06-04:00</updated>
    <id>http://rudicode.github.io/blog/2014/10/20/rails-migrations-list-of-table-column-types</id>
    <content type="html"><![CDATA[<p>This list was compiled from rails 4, but may also be valid in earlier versions of rails. Use Active Record migrations to alter your database in a structured and organized manner.</p>

<p>List of attributes for SQL types:</p>

<pre><code class="ruby list_column_types.rb">  :binary
  :boolean
  :date
  :datetime
  :decimal
  :float
  :integer
  :primary_key
  :string
  :text
  :time
</code></pre>

<!-- more -->


<p>You may also use database specific types, however this is not database agnostic and is to be used with caution.</p>

<pre><code class="ruby migration_create_races.rb">class CreateRaces &lt; ActiveRecord::Migration
  def change
    create_table :races do |t|
      t.datetime :date
      t.integer :track_id
      t.string :name

      t.timestamps
    end
  end
end
</code></pre>

<pre><code class="ruby migration_add_round_to_races.rb">class AddRoundToRaces &lt; ActiveRecord::Migration
  def change
    add_column :races, :round, :integer
  end
end
</code></pre>

<p>These are documented under column in the <a href="http://api.rubyonrails.org/classes/ActiveRecord/ConnectionAdapters/TableDefinition.html#method-i-column" title="Active Record API">Active Record API.</a></p>
]]></content>
  </entry>
  
</feed>
